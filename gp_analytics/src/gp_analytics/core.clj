(ns gp-analytics.core
  "Created by Regina Deri
   Functions to extract statistics from the data generated by our problem benchmarking (propeller.problems.statistics.benchmark-problems)."
  (:gen-class)
  (:require [clojure.edn :as edn]
            [clojure.java.io :as io]
            [clojure.string :as string]
            [gp-analytics.statistics :as stats]
            [gp-analytics.io :as gp-io]))

(defn runtime-statistics
  "Generates a map containing statistics of multiple entries (generated during benchmarking),
   each representing a single generation's efficiency data."
  [gpstat-entries & args]
  (let [generations (stats/generations-count gpstat-entries)
        runtimes (map stats/entry-runtimes gpstat-entries)
        total-runtimes (map #(reduce + %) runtimes)
        min-total-runtime (stats/min-indexed total-runtimes)
        best-total-errors (map #(:total-error %) gpstat-entries)
        best-amalgamated-errors (map #(:amalgamated-error %) gpstat-entries)
        improvement (stats/get-improvement-ratio  gpstat-entries)
        first-best (stats/get-first-best-ratio gpstat-entries)
        statistics {:generations-count generations
                    :total-runtimes total-runtimes; sum of all (case)runtimes stored in an individual
                    :min-total-runtime {:index (first min-total-runtime)
                                        :value (second min-total-runtime)}
                    :best-total-errors best-total-errors
                    :best-amalgamated-errors best-amalgamated-errors
                    #_?????:best-total-error #_{:index (first best-total-error)
                                                :value (second best-total-error)}
                    :improvement-ratio improvement
                    :first-best-ratio first-best}]
    statistics))


(defn file-gpstat-statistics
  "Returns runtime statistics for the file at the specified path. Essentially a wrapper for runtime-statistics,
   but tracks whether the run was succesful or not."
  [file-path & args]
  (let [data (gp-io/serialize-read file-path)
        data-count (count data)
        successful (if (contains? (nth data (- data-count 3)) :success-generation) ;successful?
                     true
                     false)
        total-test-error (max (get (nth data (- data-count 2)) :total-test-error -1)
                              (get (nth data (- data-count 1)) :total-test-error-simplified -1))
        gens-data (if successful
                    (drop-last 3 data);drop success data
                    data)]
    (assoc (apply runtime-statistics gens-data args)
           :successful successful
           :success-test-error total-test-error)))

(defn folder-gpstat-statistics
  "Returns results of file-gpstat-statistics for all the files in a folder. Essentially a wrapper of file-gpstat-statistics to analyze
   all the runs of a specific selection-problem pair."
  [folder-path & args]
  (when-not (. (clojure.java.io/file folder-path) isDirectory)
    (throw (Exception. "Function cannot be used for individual files. Instead, use file-gpstat-statistics.")))
  (let [argmap (first args)
        folder (clojure.java.io/file folder-path)
        files (drop 1 (file-seq  folder)); drops which is the folder entry
        filter-fn (if (get argmap :best-total-error false); option to use generation data where the individual with best-total-error is stored (instead of amalgated) 
                    (fn [s] (string/starts-with? (.getName s) "gpstat_total_error"))
                    (fn [s] (not (string/starts-with? (.getName s) "gpstat_total_error"))))
        gpstat-files (filter filter-fn files)
        statistics (map #(let
                          [file-stats (apply file-gpstat-statistics (.getAbsolutePath %) args)]
                           (assoc file-stats :file-name (.getName %)))
                        gpstat-files)]
    (if (get argmap :test-error-threshold false); option to only use runs that were succesful & met a test-error threshold
      (filter #(and (:successful %) (<= (:success-test-error %) (:test-error-threshold argmap)))
              statistics)
      statistics)))



(defn folder-aggregate-statistics
  "Combines data from all the runs of a single selection-pair into metrics which let us
   interpet the benchmark on a larger scale."
  [folder-path & args]
  (let [folder-individual-statistics (apply folder-gpstat-statistics folder-path args)
        generations (:generations-count (first folder-individual-statistics))
        average-total-runtimes (stats/average-total-runtimes folder-individual-statistics)
        min-total-runtimes (stats/min-total-runtimes folder-individual-statistics)
        fastest-individual (stats/fastest-individual folder-individual-statistics)
        average-total-errors (stats/average-total-errors folder-individual-statistics)
        average-amalgamated-errors (stats/average-amalgamated-errors folder-individual-statistics) 
        average-improvement-ratio (stats/average-improvement-ratio folder-individual-statistics)
        average-first-best-ratio (stats/average-first-best-ratio folder-individual-statistics)
        statistics {:generations-count generations
                    :average-total-runtimes average-total-runtimes
                    :min-total-runtimes min-total-runtimes
                    :fastest-individual {:file-name (:file-name fastest-individual)
                                         :generation (:index fastest-individual)
                                         :value (:value fastest-individual)}
                    :average-total-errors average-total-errors
                    :average-amalgamated-errors average-amalgamated-errors
                    :average-improvement-ratio average-improvement-ratio
                    :average-first-best-ratio average-first-best-ratio}]
    statistics
    
    #_(if-not (empty? args)
      (let [requested-keys (map keyword args)]
        (select-keys statistics requested-keys))
      statistics)))


(defn -main
  "Executable for analyzing genetic programming runtimes over every gpstat file in a folder"
  [folder-path out-path & args]
  (apply folder-gpstat-statistics folder-path out-path))
